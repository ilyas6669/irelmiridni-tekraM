// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class FlexibleHeightBar;
@class UIScrollView;

/**
  The FlexibleHeightBarBehaviorDefiner class is responsible for defining how its FlexibleHeightBar instance will behave. Often, this behavior is tightly coupled with scroll events (i.e. a UITableView scrolling to the top). Because of this close relationship between bar behavior and scroll events, behavior definers conform to UIScrollViewDelegate. A behavior definer should set its bar’s progress property to adjust the bar’s height.
  The base class FlexibleHeightBarBehaviorDefiner does not attempt to adjust the bar’s height based on scroll position, leaving it up to subclasses to implement custom bar behavior based on scrolling. The base class does, however, provide snapping behavior support. Snapping forces the bar to always snap to one of the defined snapping progress values.
*/
SWIFT_CLASS("_TtC17FlexibleHeightBar32FlexibleHeightBarBehaviorDefiner")
@interface FlexibleHeightBarBehaviorDefiner : NSObject <UIScrollViewDelegate>
@property (nonatomic, strong) FlexibleHeightBar * _Nullable flexibleHeightBar;
/**
  Determines whether snapping is enabled or not. Default value is YES.
*/
@property (nonatomic) BOOL snappingEnabled;
/**
  Determines whether the bar is current snapping or not.
*/
@property (nonatomic, readonly) BOOL currentlySnapping;
/**
  Determines whether the bar can stretch to larger sizes than it’s maximumBarHeight. Default value is NO.
*/
@property (nonatomic) BOOL elasticMaximumHeightAtTop;
/**
  Add a progress position that the bar will snap to whenever a user stops scrolling and the bar’s current progress falls within the specified progress range.
  \param progress The progress position that the bar will snap to.

  \param start The start of the range of progress percents (between 0.0 and 1.0 inclusive) that will cause the bar to snap to the specified progressPosition.

  \param end The start of the range of progress percents (between 0.0 and 1.0 inclusive) that will cause the bar to snap to the specified progressPosition.

*/
- (void)addSnappingPositionProgress:(CGFloat)progress _forProgressRangeStart:(CGFloat)start end:(CGFloat)end;
/**
  Removes the progress position corresponding to the specified progress range.
  \param start The start of the range of progress percents (between 0.0 and 1.0 inclusive) that correspond with the progressPosition that is to be removed.

  \param end The end of the range of progress percents (between 0.0 and 1.0 inclusive) that correspond with the progressPosition that is to be removed.

*/
- (void)removeSnappingPositionProgressForProgressRangeStartWithStart:(CGFloat)start end:(CGFloat)end;
/**
  Snap to the specified progress position.
  \param progress The progress position that the bar will snap to.

  \param scrollView The UIScrollView whose offset will be adjusted during the snap.

*/
- (void)snapToProgressWithProgress:(CGFloat)progress scrollView:(UIScrollView * _Nonnull)scrollView;
/**
  Snap to the appropriate progress position based on the bar’s current progress and the currently defined snapping position progresses.
  \param scrollView The UIScrollView whose offset will be adjusted during the snap.

*/
- (void)snapWith:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FlexibleHeightBar26FacebookBarBehaviorDefiner")
@interface FacebookBarBehaviorDefiner : FlexibleHeightBarBehaviorDefiner
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end

@class NSLayoutConstraint;
@class NSCoder;

/**
  The FlexibleHeightBar class is responsible for adjusting the layout attributes (i.e. frame, transform, alpha) of its subviews depending on its current height.
  The height of the bar is not set directy by adjusting the bar’s frame. Rather, height adjustments are made by setting the progress property of the bar. The progress property represents how much the bar has shrunk, with 0% progress being the bar’s full height and 100% progress being the bar’s minimum height.
  FlexibleHeightBar is designed to support any shrinking / growing behavior. For example, Safari’s shrinking header and Facebook’s shrinking header behave differently. Bar behaviors can be mix and matched (and hot swapped) by setting the bar’s behaviorDefiner property.
*/
SWIFT_CLASS("_TtC17FlexibleHeightBar17FlexibleHeightBar")
@interface FlexibleHeightBar : UIView
@property (nonatomic, strong) NSLayoutConstraint * _Nullable heightConstraint;
@property (nonatomic, readonly) BOOL useAutoLayout;
/**
  The non-negative maximum height for the bar. The default value is <em>44.0</em>.
*/
@property (nonatomic) CGFloat maximumBarHeight;
/**
  The non-negative minimum height for the bar. The default value is <em>20.0</em>.
*/
@property (nonatomic) CGFloat minimumBarHeight;
/**
  The current progress, representing how much the bar has shrunk. <em>progress == 0.0</em> puts the bar at its maximum height. <em>progress == 1.0</em> puts the bar at its minimum height. The default value is <em>0.0</em>.
  progress is bounded between <em>0.0</em> and <em>1.0</em> inclusive unless the bar’s behaviorDefiner instance has its elasticMaximumHeightAtTop set to <em>true</em>.
*/
@property (nonatomic) CGFloat progress;
/**
  The behavior definer for the bar. Behavior definers are instances of FlexibleHeightBarBehaviorDefiner. Behavior definers can be changed at run time to provide a different behavior.
*/
@property (nonatomic, strong) FlexibleHeightBarBehaviorDefiner * _Nullable behaviorDefiner;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/**
  Remove the layout attributes instance that corresponds to then specified progress value from the specified subview.
  \param subview The subview to remove the layout attriutes from.

  \param subviewProgress The progress value corresponding to the layout attributes that are to be removed.

*/
- (void)removeLayoutAttributeForSubview:(UIView * _Nonnull)subview forProgress:(CGFloat)barProgress;
- (void)addLayoutConstraintConstant:(CGFloat)constant forContraint:(NSLayoutConstraint * _Nonnull)constraint forProgress:(CGFloat)barProgress;
- (void)removeLayoutConstraintConstantforConstraintWithConstraint:(NSLayoutConstraint * _Nonnull)constraint forProgress:(CGFloat)barProgress;
- (void)layoutSubviews;
@end



SWIFT_CLASS("_TtC17FlexibleHeightBar28SquareCashBarBehaviorDefiner")
@interface SquareCashBarBehaviorDefiner : FlexibleHeightBarBehaviorDefiner
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


SWIFT_CLASS("_TtC17FlexibleHeightBar24TableViewDelegateHandler")
@interface TableViewDelegateHandler : NSObject <UITableViewDelegate>
/**
  Second delegate object that responds to scrollViewDelegate events
*/
@property (nonatomic, strong) id <UIScrollViewDelegate> _Nullable otherDelegate;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
